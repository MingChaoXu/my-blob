<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo+next配置——让自己的博客拥有版权声明]]></title>
    <url>%2Fhexo-next%E9%85%8D%E7%BD%AE%E2%80%94%E2%80%94%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%8B%A5%E6%9C%89%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%2F</url>
    <content type="text"><![CDATA[让自己的博客的博客拥有版权声明是一件非常有必要的事，因为这样可以让爬虫爬取自己的博文时，增加自己被搜索到的权重，更重要的是让自己的成果不被别人轻易剽窃！(◎_◎;)下面博主介绍一下，如何利用hexo在next主题下添加自己的版权声明(´▽｀)新建post-copyright.swig文件修改文件themes/next/layout/_macro/post-copyright.swig，若是没有这个文件，则新建他复制代码如下，到这个文件中去1234567891011121314&lt;ul class=&quot;post-copyright&quot;&gt;&lt;li class=&quot;post-copyright-author&quot;&gt; &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.author&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt; &#123;&#123; post.author | default(config.author) &#125;&#125;&lt;/li&gt;&lt;li class=&quot;post-copyright-link&quot;&gt; &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.link&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125;&lt;/strong&gt; &lt;a href=&quot;&#123;&#123; post.url | default(post.permalink) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot;&gt;&#123;&#123; post.url | default(post.permalink) &#125;&#125;&lt;/a&gt;&lt;/li&gt;&lt;li class=&quot;post-copyright-license&quot;&gt; &lt;strong&gt;&#123;&#123; __(&apos;post.copyright.license_title&apos;) + __(&apos;symbol.colon&apos;) &#125;&#125; &lt;/strong&gt; &#123;&#123; __(&apos;post.copyright.license_content&apos;, theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;&lt;/li&gt;&lt;/ul&gt;打开开关在主题配置文件_config.yml中搜索post_copyright，将其属性改为true，若是没有这个属性，则添加这个属性12post_copyright: enable: true内嵌前端代码这里提一句如何在hexo博客中内嵌前端代码，我这里实验的codeblock不好使，所以我直接使用markdown的方式插入代码块了，即使用`]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVPR2019 PaperReading(2)]]></title>
    <url>%2Fpaperreading%2F</url>
    <content type="text"><![CDATA[[] Taking A Closer Look at Domain Shift: Category-level Adversaries for Semantics Consistent Domain Adaptationddddddxdfasdfaf]]></content>
      <categories>
        <category>PaperReading</category>
      </categories>
      <tags>
        <tag>transfer learning</tag>
        <tag>zero-shot</tag>
        <tag>domain adaptation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blob迁移教程]]></title>
    <url>%2Fblob%E8%BF%81%E7%A7%BB%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[日常生活中可能会遇到我们不能在自己的电脑上写博客的情况，hexo搭建的博客由于需要在本地安装相应的包，所以博主写这个博客来记录一下一键迁移的几个步骤o(≧v≦)o首先，从github上clone自己的博客代码，如果不是自己的电脑，建议不用ssh key，这里顺便简单介绍一下ssh key的建立方式：123$ cd ~/.ssh$ ssh-keygen -t rsa -C "your_email@example.com"$ clip &lt; ~/.ssh/id_rsa.pub把ssh key粘贴到github的密钥中，在setting中找到，测试ssh key是否成功1$ ssh -T git@github.com接下来是正文╮(╯▽╰)╭，clone自己的blob1$ git clone git@github.com:MingChaoXu/my-blob.git博主的一键安装脚本在这个地方，其实就是把自己需要安装的包写到一个脚本里去，运行脚本即可一键安装1$ git clone git@github.com:MingChaoXu/blob-move.git这里插一句题外话，要是git用的不熟的同学简单介绍一下如何做，首先在本地建立一个blob-move的文件夹，然后写相应的脚本blob-move.sh，接下来运行git init命令在本地初始化git，在github上新建一个空的项目blob-move，然后添加远程分支即可并push即可，命令如下：1234$ git remote add origin git@github.com:MingChaoXu/blob-move.git$ git add .$ git commit -m "new shell"$ git push言归正传，这时已经有了一键安装的脚本blob-move.sh，把他copy到博客文件夹下，运行如下命令即可：123$ npm install hexo --save$ hexo init$ sh blob-move.sh推荐文章Hexo搭建GitHub博客—打造炫酷的NexT主题–高级]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[马克飞象]]></title>
    <url>%2F%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[由于这篇马克飞象的教程有markdown的语法，博主实在是懒，就摘过来了，方便自己查找欢迎使用马克飞象@(收集箱)[马克飞象, 帮助, Markdown]马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；得心应手 ：简洁高效的编辑器，提供桌面客户端以及离线Chrome App，支持移动端 Web；深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。[TOC]Markdown简介Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt'''LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：$$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$表格ItemValueQtyComputer1600 USD5Phone12 USD12Pipe1 USD234流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op以及时序图:123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!提示：想了解更多，请查看流程图语法以及时序图语法。复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。[^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 ENML 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[No module named 'warpctc_pytorch._warp_ctc']]></title>
    <url>%2Fwarp-ctc%2F</url>
    <content type="text"><![CDATA[因为新装了一个环境，需要重装warp_ctc，但是官方的教程一直都不通1$ git clone https://github.com/SeanNaren/warp-ctc.git12&gt; import warpctc_pytorchModuleNotFoundError: No module named 'warpctc_pytorch._warp_ctc'网上的教程怎么试都不行，后来一想，难道试版本问题，我查了一下我以前使用的版本，回退回去重新安装果然可以了！凸^-^凸这里记录下我使用的warpctc版本idac045b6072b9bc3454fb9f9f17674f0d59373789]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>ctc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy.core.multiarray failed to import]]></title>
    <url>%2Fimport%2F</url>
    <content type="text"><![CDATA[在某次运行pytorch程序时突然报关于numpy的错误12&gt; import torchImportError: numpy.core.multiarray failed to import网上搜了很多教程，大家的意见基本是用pip重新装一遍，运行代码如下：1&gt; pip install -U numpy但是我怎么试都不好使呀(╯°□°）╯︵ ┻━┻。后来在github issue里看见一个人说他卸了两次，我灵机一动，会不会是我安装的numpy版本太多了。所以我一直pip uninstall numpy, 然后再重装就OK了]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac制作gif]]></title>
    <url>%2Fmac%E5%88%B6%E4%BD%9Cgif%2F</url>
    <content type="text"><![CDATA[如何用Mac自带的QuickTime Player录制视频并制作GIF动图一直想要制作GIF来提升自己的文章质量，或者表情包质量(◐‿◑) ，今天休息的时候抽空研究了一下，写下这篇教程1.通过QuickTime录制视频在file下拉菜单中选择新建屏幕录制，然后开始录制视频2.通过QuickTime剪辑视频用quicktime打开保存的视频，在view下拉菜单下选择显示剪辑双击进度条，可以剪辑自己想要的部分。3.视频转GIF这里我主要是用的这个网站免费转换，但是只能转100M以下的视频，利用Google账户登录就行下面展示以下我的成果哈哈哈(´▽｀)这个屏幕的GIF尺寸适合450*330]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>GIF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo瞎折腾系列——seo优化]]></title>
    <url>%2Fhexo%E7%9E%8E%E6%8A%98%E8%85%BE%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94seo%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[晚上吃完晚饭休息的时候继续瞎折腾，博客基本功能基本健全，但是总体体验感觉速度较慢，所以对网站做了优化╮(╯▽╰)╭，主要是一下两点：双线路解析代码压缩双线路解析由于之前是把博客代码托管到github上，在国内上网比较慢，所以采用双线路解析的方式，在国内通过coding来托管，境外通过github pages解析，但是这个实现过程中遇到了一个bug！(◎_◎;)，就是我在coding pages上换成自己域名时ssl证书验证不通过。解决方法是，先把域名解析的国外的对应条例给暂停一下，然后再重新验证，这时候coding就可以验证通过了，然后再重新打开。代码压缩hexo生成的html代码中有大量的空白，代码可以进行压缩，从而达到加速的目的。这里我当然是选择最简单的方法啦，谁让我懒呢(@_@)hexo neat 插件安装neat插件1$ npm install hexo-neat --save打开站点配置文件，添加以下属性, 可以选择是否压缩HTML、CSS、Js文件，均有相应的开关选项。1234567891011121314151617181920# hexo-neatneat_enable: trueneat_html: enable: true exclude: neat_css: enable: true exclude: - '*.min.css'neat_js: enable: true mangle: true output: compress: exclude: - '*.min.js']]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pytorch--并行bug]]></title>
    <url>%2Fpytorch-%E5%B9%B6%E8%A1%8Cbug%2F</url>
    <content type="text"><![CDATA[官方版本的pytorch 并行方式一般使用下面这种方式：12&gt; id = '0,1'&gt; model = nn.DataParallel(model, device_ids=id) 这种并行方式主程序只会运行一次，并在跑模型前向的时候自动把batch平分到各卡，这就带来一个问题，当模型有两个输入时，例如一个batch为32，1个batch为2，假如用4卡并行，会出现第一个输入均分到各卡上是batch为8的tensor，但是第二个输入会有卡分配不到tensor，这时候程序会报错。我理解的错误是由这个原因导致的，解决办法也许是换一种并行方式，利用broudcast整个各卡信息。]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pytorch调试记录(1)]]></title>
    <url>%2Fpytorch%E8%B0%83%E8%AF%95%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[昨天调试pytorch 并行的时候发现一个以前没有注意到的细节1234&gt; id = '0,1'&gt; torch.device(id)&gt; tensor.to(id)&gt; model = nn.DataParallel(model, device_ids=id) 这里的device和实际显卡的id并不对应，想要和实际显卡id对应，可以通过下面这种方式对应12&gt; id = 2&gt; torch.cuda.set_device(id)or1&gt; os.environ["CUDA_DEVICE_ORDER"] = '2,3']]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blob收录踩坑]]></title>
    <url>%2Fblob%E6%94%B6%E5%BD%95%E8%B8%A9%E5%9D%91%2F</url>
    <content type="text"><![CDATA[本篇文章简单记录一下博客网站优化过程中的踩坑点更换域名博客搭建完的第二天，我手痒（ーー；）又花了一段时间搞了域名迁移与seo优化。╮(╯▽╰)╭，接下来简单讲一下过程中遇到的一些坑点。首先说把博客从github pages上迁移到自己到域名上，之前没有买过域名，网上都说国内建议买阿里云的域名，我搜了一下感觉价格略贵，学生党并不想多花钱(T ^ T)，但是百度给我推送的腾讯云刚好有打折活动，xyz的域名新用户1年只要1元，买了啊！一通注册操作后，来到了域名管理的后台，主要是需要域名解析的操作，中间涉及到cname解析等等，这些网上一些大牛们都有教程，我就不赘述了。花时间的主要原因是不熟练。另外在换域名的过程中，url的设置可以加上https:\\，(自行对应)。hexo 生成并发布的过程中，我发现github上的common网址每次刷新都会变回$github.io$，每次刷新好麻烦呀！┻━┻︵╰(‵□′)╯︵┻━┻，搜教程发现只需要在站点的source文件夹下加入一个CNAME文件即可，看清楚，是CNAME，而不是CHAME！我第一次写错了，来回找错误没找到，折腾好久发现文件名写错了(╯‵□′)╯︵┻━┻，改完之后每次上传就可以自动更新site网址啦～收录博客网址接下来就是让自己的博客可以被百度和谷歌收录啦，生命在于折腾，呦吼吼（≧∇≦）这里面遇到了挺多坑的，按着教程走也挺慢才走通。首先，在被百度收录的过程中，在添加网址时，百度搞出了新花样！需要注册熊掌id，但是在注册过程中要用到手机端的百度app人脸验证（度娘这波广告打得好）。不过这里面需要吐槽一下，百度的这个人脸验证可能时刚出来不久，功能使用体验很差（ーー；），摄像头调用还经常失败，黑屏，延迟，卡顿什么的低级bug常发生，总之就是按照他的流程我走了n遍才验证通过(╯°□°）╯︵ ┻━┻，用户体验较差。接下来就是提交站点地图了，这里面看教程有一个误解，我使用的时cname验证，因为容易嘛，但是要注意主机记录是复制的前面那一串字符串，后面的域名就不要复制了，腾讯云的dns解析会自动给加上，拿我的举例，就是把$.xumingchao.xyz$给去掉。其他就没有什么坑了，还有一点就是百度的sitemap加进去后反应真慢，看了一下博客发现这是正常现象，反正我现在还没有通过。Google收录的过程中，主要遇到的坑是，Google的search console更新版本了，之前的收录方式对应不上了，不过我自己摸索着使用文件验证成功收录了https://xumingchao.xyz，但是xumingchao.xyz只能用dns配置来收录验证，这里面我是个小白，什么都不懂，暂时也没有搞通，以后再搞吧推荐文章hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？Hexo-优化：提交sitemap及解决百度爬虫抓取-GitHub-Pages-问题Hexo插件之百度主动提交链接]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVPR2019 PaperReading(1)]]></title>
    <url>%2FPaperReading%2F</url>
    <content type="text"><![CDATA[On the Structural Sensitivity of Deep Convolutional Networks to the Directions of Fourier Basis Functions Striking the Right Balance with Uncertainty NM-Net: Mining Reliable Neighbors for Robust Feature Correspondences C2AE: Class Conditioned Auto-Encoder for Open-set Recognition Doodle to Search: Practical Zero-Shot Sketch-based Image Retrieval Zero-Shot Task Transfer C-MIL: Continuation Multiple Instance Learning for Weakly Supervised Object Detection Transferrable Prototypical Networks for Unsupervised Domain AdaptationZero-Shot Task Transfer这篇文章是针对zero shot的任务提出了一个新的meta learning的算法——TTNet。这个meta-learner 学习模型参数时从有ground truth的已知任务来迁移到新的zero-shot任务中来。本篇paper是做的taskonomy的zero-shot任务，以下4个任务作为zero-shot:surface-normalroom layoutdepthcamera pose estimationMethod定义已知ground truth的m个task为${\tau_{1},…,\tau_{m}}$, zero-shot task为${\tau_{m+1},…,\tau_{K}}$.用多任务学习的方法，将需要学习的meta-learning function $F(.)$建模为有m个branches的network，参数分别为${W_{1},…,W_{m}}$，这些任务分支在开头没有联系，在后面通过一个$W_{common}$的block来coupled。因此，$F(.)$可以分为两个部分，第一个部分是m个$W_{i}s$，第二个部分是$W_{common}$。疑问点：本篇paper的TTnet是生成data networl的framework，但是不同的zero shot task的decoder不一样，这一点是如何保证可以生成的呢？这个work可以transfer到zero-shot的task上，我理解的关键之处在于两点：任务间的相关矩阵，这个是通过DB算法计算出来的，由30个志愿者打分提供得分依赖训练时的transfer model可以让模型学习到transfer的特性但是我并没有看到TTnet利用到zero-shot任务的数据，这些任务的数据都是一样的，只是zero-shot没有相应的ground truth其他细节见paperC2AE: Class Conditioned Auto-Encoder for Open-set Recognition这篇paper做的是open-set recognition，zero-shot相关的工作，中规中矩的unseen class分类。开放集识别是近两年一个特别新，且有实际研究价值的方向。作者提出了一个class conditioned auto-encoders的方法，训练过程中分为两个子任务：closed-set classificationopen-set identification(区分known还是unknown的class)encoder 用closed-set分类任务的pipeline学习第一个子任务，decoder通过条件重构class identity来学习第二个子任务。NM-Net: Mining Reliable Neighbors for Robust Feature Correspondences]]></content>
      <categories>
        <category>PaperReading</category>
      </categories>
      <tags>
        <tag>transfer learning</tag>
        <tag>zero-shot</tag>
        <tag>domain adaptation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
      <categories>
        <category>Technology</category>
      </categories>
  </entry>
</search>
